# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"

linter:
  # Relaxed lint rules focusing on errors and critical issues only
  rules:
    # Essential Error rules - Keep these for code safety
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_slow_async_io
    - avoid_types_as_parameter_names
    - cancel_subscriptions
    - close_sinks
    - control_flow_in_finally
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - valid_regexps

    # Basic style rules - Keep only the most important ones
    - annotate_overrides
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_return_types_on_setters
    - avoid_unnecessary_containers
    - camel_case_extensions
    - camel_case_types
    - curly_braces_in_flow_control_structures
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - file_names
    - non_constant_identifier_names
    - only_throw_errors
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors_in_immutables
    - prefer_contains
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_single_quotes
    - recursive_getters
    - unnecessary_const
    - unnecessary_new
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_this
    - use_rethrow_when_possible

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options